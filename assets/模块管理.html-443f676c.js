import{_ as p,M as o,p as c,q as i,R as n,t as s,N as e,a1 as t}from"./framework-ea2a9e6e.js";const l={},u=t('<h2 id="基础知识" tabindex="-1"><a class="header-anchor" href="#基础知识" aria-hidden="true">#</a> 基础知识</h2><blockquote><p>node.js使用common.js模块管理，common.js是2009年指定的模块标准</p></blockquote><p>node推出的时候 javaScript 还没有 ES6 Module;</p><p><strong>模块特点</strong></p><ul><li>每个文件都被视为一个模块</li><li>使用<code>module.export</code>导出模块，使用<code>require</code>导入模块。</li><li>建议将文件底部定义模块导出，这样会清楚的知道模块哪些内容被导出了</li><li>导入时可以使用<code>JS</code>的解构获取具体的<code>api</code></li><li>使用<code>module.exports</code>导出模块，而不是直接使用<code>exports</code>导出模块</li></ul><h3 id="模块类型" tabindex="-1"><a class="header-anchor" href="#模块类型" aria-hidden="true">#</a> 模块类型</h3><p>不能将所有功能写在一个文件中，所以项目要使用模块化管理，将模块理解为一个个独立的文件。使用模块思想可以更好的组织项目代码，因为模块是独立文件所以可以更好的复用代码。</p><p><strong>nodejs中有一下集中模块类型</strong></p>',8),r=n("li",null,"本地模块即自己开发的模块",-1),d=n("li",null,"nodejs内置模块",-1),k={href:"https://www.npmjs.com/",target:"_blank",rel:"noopener noreferrer"},v=t(`<h3 id="定义模块" tabindex="-1"><a class="header-anchor" href="#定义模块" aria-hidden="true">#</a> 定义模块</h3><p>模块的定义非常简单，任何<code>js文件</code>都可以是模块</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a<span class="token operator">+</span>b
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;sum.js module&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在<code>index.js</code>中使用<code>require</code>函数导入模块</p><ul><li>模块的文件扩展名<code>.js</code>是可以省略的</li><li>导入的模块会自动执行</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./sum.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="目录模块" tabindex="-1"><a class="header-anchor" href="#目录模块" aria-hidden="true">#</a> 目录模块</h3><p>当不指定<code>导入文件的路径时</code>，<code>node</code>会自动导入模块。</p><p>执行下面命令可以得到，node会从哪些目录中尝试找到模块</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>paths<span class="token punctuation">)</span>；
<span class="token comment">//目录列表</span>
<span class="token punctuation">[</span>
  <span class="token string">&#39;C:\\\\Users\\\\16798\\\\Desktop\\\\nodejs\\\\01\\\\node_modules&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;C:\\\\Users\\\\16798\\\\Desktop\\\\nodejs\\\\node_modules&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;C:\\\\Users\\\\16798\\\\Desktop\\\\node_modules&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;C:\\\\Users\\\\16798\\\\node_modules&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;C:\\\\Users\\\\node_modules&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;C:\\\\node_modules&#39;</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模块管理" tabindex="-1"><a class="header-anchor" href="#模块管理" aria-hidden="true">#</a> 模块管理</h2><p>实际开发中我们只想提供模块中的某个功能，这就需要使用<code>module.exports</code>想外部提供接口。</p><h3 id="默认导出" tabindex="-1"><a class="header-anchor" href="#默认导出" aria-hidden="true">#</a> 默认导出</h3><p>使用<code>module.exports</code>将模块的 sum 接口向外部提供</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sumTotal</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a<span class="token operator">+</span>b
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;sum.js module&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports<span class="token operator">=</span>sumTotal<span class="token punctuation">;</span>
<span class="token comment">//index.js使用</span>
<span class="token keyword">const</span> sumTotal <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./sum.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sumTotal</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="作用域" tabindex="-1"><a class="header-anchor" href="#作用域" aria-hidden="true">#</a> 作用域</h3><p>每个模块文件拥有独立的作用域，a.js与b.js模块都定义了name变量，因为有独立作用域，所以不会被覆盖，这个概念类似于<code>javascript</code>的函数与块作用域的关系</p><ul><li>使用模块作用域，就不用担心模块中同名变量或函数的冲突问题</li></ul><p><strong>a.js</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> name <span class="token operator">=</span><span class="token string">&#39;a.js&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>b.js</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> name <span class="token operator">=</span><span class="token string">&#39;b.js&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>index.js</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./a.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//a.js</span>
<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./b.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//b.js</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="包装函数" tabindex="-1"><a class="header-anchor" href="#包装函数" aria-hidden="true">#</a> 包装函数</h3><p>其实<code>node.js</code>会将模块放在一下函数中，这就是为什么我们可以在 模块文件中使用<code>module</code>等功能</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">exports<span class="token punctuation">,</span>require<span class="token punctuation">,</span>module<span class="token punctuation">,</span>__filename<span class="token punctuation">,</span>__dirname</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//模块文件代码</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模块缓存" tabindex="-1"><a class="header-anchor" href="#模块缓存" aria-hidden="true">#</a> 模块缓存</h3><p><code>Commonjs</code>加载的模块会被缓存起来，再有文件使用改模块时将从缓存中获取</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>require<span class="token punctuation">.</span>cache<span class="token punctuation">)</span>
<span class="token punctuation">[</span>Object<span class="token operator">:</span> <span class="token keyword">null</span> prototype<span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&#39;C:\\\\Users\\\\16798\\\\Desktop\\\\nodejs\\\\01\\\\index.js&#39;</span><span class="token operator">:</span> Module <span class="token punctuation">{</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;C:\\\\Users\\\\16798\\\\Desktop\\\\nodejs\\\\01&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;C:\\\\Users\\\\16798\\\\Desktop\\\\nodejs\\\\01\\\\index.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">loaded</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">&#39;C:\\\\Users\\\\16798\\\\Desktop\\\\nodejs\\\\01\\\\node_modules&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;C:\\\\Users\\\\16798\\\\Desktop\\\\nodejs\\\\node_modules&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;C:\\\\Users\\\\16798\\\\Desktop\\\\node_modules&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;C:\\\\Users\\\\16798\\\\node_modules&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;C:\\\\Users\\\\node_modules&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;C:\\\\node_modules&#39;</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下例中的 text.js 模块被 index.js 第一次 require 时就会缓存了，在第二次<code>require</code>时直接使用缓存的模块，所以两次打印结构都是&#39;textjs&#39;</p><p><strong>test.js</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>
  name<span class="token operator">=</span><span class="token string">&#39;testjs&#39;</span><span class="token punctuation">;</span>
  <span class="token function">setName</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>index.js</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./test.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;test.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//test.js</span>

<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./test.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//test.js</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>为了解决上面的问题，test.js不要导出对象实例，而是单独的类</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>
  name<span class="token operator">=</span><span class="token string">&#39;testjs&#39;</span><span class="token punctuation">;</span>
  <span class="token function">setName</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Test<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在<code>index.js</code>中使用时new出不同的实例即可</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Test <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./test.js&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
obj1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;obj1&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//obj1</span>

<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//testjs</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="导出方式" tabindex="-1"><a class="header-anchor" href="#导出方式" aria-hidden="true">#</a> 导出方式</h3><p><strong>直接导出</strong></p><p>直接将函数导出</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>属性导出</strong></p><p>通过<code>exports</code>属性导出</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token function-variable function">sum</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span>

<span class="token comment">//使用的时候就像这样</span>
<span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./test.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>对象导出</strong></p><p>也可以导出的接口放到对象中统一导出</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span>
<span class="token keyword">const</span> webname<span class="token operator">=</span><span class="token string">&#39;test.js&#39;</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">{</span>
  sum<span class="token punctuation">,</span>
  webname<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token comment">//使用的时候可以使用结构语法获取接口</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> webname<span class="token punctuation">,</span> sum <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./test&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> webname<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="module-exports-与exports" tabindex="-1"><a class="header-anchor" href="#module-exports-与exports" aria-hidden="true">#</a> module.exports 与exports</h3><p>通过对模块的包装函数理解，最终模块导出使用的是<code>module.exports</code>对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">exports<span class="token punctuation">,</span>require<span class="token punctuation">,</span>module<span class="token punctuation">,</span>__filename<span class="token punctuation">,</span>__dirname</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">//模块文件代码</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以简化导出，省略掉<code>module</code>前缀</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>sum<span class="token operator">=</span>sum<span class="token punctuation">;</span>
<span class="token comment">//调用</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span>sum<span class="token punctuation">}</span><span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./test.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是因为<code>node.js</code>最终导出时使用<code>module.exports</code>对象的，如果直接使用<code>exports</code>导出一个对象，这时<code>exports</code>变量就不与<code>module.exports</code>使用相同的内存引用，就不会导出成功</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//下面写法将不会正确导出</span>
<span class="token keyword">const</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span>
exports<span class="token operator">=</span><span class="token punctuation">{</span>sum<span class="token punctuation">}</span>
<span class="token comment">//正确使用方式，因为 nodejs 内部最终使用的时 module.exports 变量</span>
<span class="token keyword">const</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>sum<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="json" tabindex="-1"><a class="header-anchor" href="#json" aria-hidden="true">#</a> JSON</h3><p><strong>common.js可以支持<code>JSON</code>文件的导入</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;nodeJs&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token string">&quot;18&quot;</span>
<span class="token punctuation">}</span>
<span class="token comment">//使用</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./import.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//{ name: &#39;nodeJs&#39;, age: &#39;18&#39; }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="es6-module" tabindex="-1"><a class="header-anchor" href="#es6-module" aria-hidden="true">#</a> ES6 Module</h2><p>早期<code>javascript</code>没有模块功能，所以<code>nodejs</code>使用了<code>common.js</code>，不过从<code>ES 2015</code>推出了<code>JS</code>模块标准简称<code>ESM</code>,<code>NodeJs 13</code>开始支持了<code>ES6 Module</code>。使用<code>ES6</code>模块标准，可以让给我们在编写<code>Node、Vue、React</code>使用统一的模块操作方法</p><p>定义<code>test.mjs</code>支持 ESM 的模块</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> sum<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 <code>index.mjs</code>中使用 ESM 语法导入模块</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> sum <span class="token keyword">from</span> <span class="token string">&quot;./test.mjs&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>要使用 ES6 模块管理请在 <code>package.json</code> 定义 <code>type</code>属性</strong></p><ul><li>如果编写的是 <strong>.ts</strong> 文件，就不要设置 <strong>type</strong> 属性</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;module&quot;</span>
    ...
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="读取-json" tabindex="-1"><a class="header-anchor" href="#读取-json" aria-hidden="true">#</a> 读取 JSON</h3><p>读取<code>JSON</code>文件需要在<code>tsconfig.json</code>中定义<code>resolveJsonModule</code>选项</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    ...
    <span class="token property">&quot;resolveJsonModule&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;./**/*&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在文件中引入<code>JSON</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> data <span class="token keyword">from</span> <span class="token string">&#39;./test.json&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="第三方模块" tabindex="-1"><a class="header-anchor" href="#第三方模块" aria-hidden="true">#</a> 第三方模块</h2>`,74),m={href:"https://npmjs.com/",target:"_blank",rel:"noopener noreferrer"},b=n("p",null,[s("当安装 "),n("strong",null,"Node.js"),s(" 后已经内置了"),n("code",null,"npm"),s("这个包管理命令，可以使用"),n("code",null,"Npm"),s("下载、删除、更新、发布软件包。当然也可以使用"),n("code",null,"yarn"),s("或"),n("code",null,"pnpm"),s("命令管理第三方扩展包。")],-1);function g(j,h){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("ul",null,[r,d,n("li",null,[s("从 "),n("a",k,[s("npm | Home (npmjs.com)"),e(a)]),s(" 下载安装的第三方模块")])]),v,n("p",null,[s("在开发时不可能编写所有的功能，所以要使用包管理工具，安装 **"),n("a",m,[s("npmjs.com (opens new window)"),e(a)]),s("**网站上的包。")]),b])}const x=p(l,[["render",g],["__file","模块管理.html.vue"]]);export{x as default};
