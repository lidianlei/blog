import{_ as p,M as e,p as o,q as c,R as s,t as n,N as i,a1 as a}from"./framework-ea2a9e6e.js";const l={},u=a(`<h2 id="stream" tabindex="-1"><a class="header-anchor" href="#stream" aria-hidden="true">#</a> Stream</h2><p><strong>Stream</strong>是大多数 Node.js 应用程序所依赖的主要功能之一，比如 HTTP 请求、文件的读写操作等，</p><h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h3><p>stream 是哦那个一个点到另一个点的数据流。可以将流理解为 Buffer 的搬运工，将 Buffer 一块块的搬运（流动）到目的地。比如想前端发送一个大文件内容时，使用 stream 可以边读取边发送，传统模式要一次读取文件再发送，所有使用 Stream 可以为我们带来更好的内存和事件效率</p><ul><li><strong>Stream</strong>用于处理数据的传输</li><li>在开发中我们多数使用的是对<strong>stream</strong>的封装，一般不需要自己写<strong>stream</strong>的控制</li><li><strong>stream</strong>主要用在网络请求，文件处理等<strong>IO</strong>操作</li><li>在处理大文件时才可以体验到<strong>stream</strong>的效率</li></ul><h3 id="evenremitter" tabindex="-1"><a class="header-anchor" href="#evenremitter" aria-hidden="true">#</a> EvenrEmitter</h3><p><strong>Stream</strong>流对像是<strong>EventEmitter</strong>的实例，所以拥有事件处理机制</p><ul><li>open 文件被打开时触发</li><li>close 文件被关闭时触发</li><li>data 当有初级读取时触发</li><li>end 数据读取完毕时触发，早于 clsoe 事件</li><li>error 在接收和写入过程中发生错误时触发</li></ul><h2 id="可读流" tabindex="-1"><a class="header-anchor" href="#可读流" aria-hidden="true">#</a> 可读流</h2><p>可读流指数据从源头（如磁盘）读取内存，也可以将流理解为 Buffer 的搬运工，将 Buffer 一块块的搬运（流动）到目的地</p><ul><li>数据会分块读取</li><li>Buffer 数据时二进制的，所以结果时二进制表示</li><li>使用着这种方式时一块一块读取处理数据，所以要比一次读取文件到内存性能更好</li><li>stream 使用默认的 64KB 的 Buffer</li></ul><h3 id="基本操作" tabindex="-1"><a class="header-anchor" href="#基本操作" aria-hidden="true">#</a> 基本操作</h3><p>通过读取超大文件 node.json，体验 Buffer 的操作大数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>createReadStream<span class="token punctuation">,</span>createWriteStream<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;fs&#39;</span><span class="token punctuation">;</span>

<span class="token comment">//创建可读流，将数据以块的形式读取，每次读取一点放到缓存区</span>
<span class="token keyword">const</span> readStream <span class="token operator">=</span> <span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">&#39;./node.txt&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
  <span class="token literal-property property">encoding</span><span class="token operator">:</span><span class="token string">&quot;utf-8&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> writeStream <span class="token operator">=</span> <span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">&#39;1.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//每次读取到数据时，会触发函数</span>
readStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>
  writeStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以在读取时设置编码，指定Buffer大小</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> readStream <span class="token operator">=</span> <span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">&#39;./node.txt&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">encoding</span><span class="token operator">:</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">highWaterMark</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="http" tabindex="-1"><a class="header-anchor" href="#http" aria-hidden="true">#</a> http</h3><p>http 服务相应大文件例子</p><p>一次加载文件后相应会占用大量内容，同时用户会等待</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>readFile<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;fs&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>createServer<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;http&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> service <span class="token operator">=</span> <span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;1.txt&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span>content</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
service<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在改用 流 的方式，通过 Buffer 一块一块读取，然后响应数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>createReadStream<span class="token punctuation">,</span>readFile<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;fs&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>createServer<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;http&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> service <span class="token operator">=</span> <span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> readStream <span class="token operator">=</span> <span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">&#39;1.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  readStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  readStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

service<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="可写流" tabindex="-1"><a class="header-anchor" href="#可写流" aria-hidden="true">#</a> 可写流</h2><p><strong>可写流</strong>是消费者上游流过来的数据</p><ul><li>写入文件</li><li>压缩数据</li><li>接收客户端的请求</li><li>服务器响应数据到客户端</li></ul><h3 id="基本操作-1" tabindex="-1"><a class="header-anchor" href="#基本操作-1" aria-hidden="true">#</a> 基本操作</h3><p>使用可写流，将读取到的流写入到新文件，测试时需要一个特别大的node.json 才可以看到效果</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>createReadStream<span class="token punctuation">,</span>createWriteStream<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;fs&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> readStream <span class="token operator">=</span> <span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">&#39;./node.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> writeStream <span class="token operator">=</span> <span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">&#39;./xj.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

readStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;读取了一个块...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  writeStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;&gt;写入了一个块&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="流式写入" tabindex="-1"><a class="header-anchor" href="#流式写入" aria-hidden="true">#</a> 流式写入</h3><p>使用流生成 1000 行数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>createWriteStream<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;fs&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> stream <span class="token operator">=</span> <span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">&#39;1.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">1000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  stream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;nodejs\\n&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="pipe管道" tabindex="-1"><a class="header-anchor" href="#pipe管道" aria-hidden="true">#</a> PIPE管道</h2><p>使用 PIPE 可以让我们对流的操作更简单</p><h3 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h3><p>流的读取与写入是通过事件监听手动操作的，可以通过<strong>PIPE管道</strong>简化该操作，从读取流中获取数据然后通过管道传递到写入流中完成数据的写入</p><p>使用管道不需要手动监听数据事件，管道颞部会自动完成，下面将上面<strong>可写流</strong>例子使用管道操作</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>createReadStream<span class="token punctuation">,</span>createWriteStream<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;fs&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> readStream <span class="token operator">=</span> <span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">&#39;./node.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> writeStream <span class="token operator">=</span> <span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">&#39;./xj.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//使用管道将可读流的数据，传递给可写流创建文件</span>
readStream<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>writeStream<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pipeline" tabindex="-1"><a class="header-anchor" href="#pipeline" aria-hidden="true">#</a> pipeline</h3><p>使用<strong>pipeline</strong>工具函数可以实现管道操作，并可以方便的捕捉错误</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>createReadStream<span class="token punctuation">,</span>createWriteStream<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;fs&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>pipeline<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;stream&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> readStream <span class="token operator">=</span> <span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">&#39;1.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> writeStream <span class="token operator">=</span> <span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">&#39;xj.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">pipeline</span><span class="token punctuation">(</span>readStream<span class="token punctuation">,</span>writeStream<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;出错了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">throw</span> error<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自定义可读流" tabindex="-1"><a class="header-anchor" href="#自定义可读流" aria-hidden="true">#</a> 自定义可读流</h2><p>既然<strong>stream</strong>贯穿<strong>node</strong>的应用，所以在<strong>node</strong>中有固定的规范，这样不用<strong>stream</strong>才可以协同工作，<strong>pipe</strong>管道才可以有效应用。下面来学习自定义流的控制，自定义流需要使用<strong>node</strong>内置的模块<strong>stream</strong>。</p><h3 id="选项参数" tabindex="-1"><a class="header-anchor" href="#选项参数" aria-hidden="true">#</a> 选项参数</h3><p>可读流需要继承<strong>Readable</strong>类实现，通过构造函数产地的选项如下</p><ul><li><strong>encoding</strong> 数据编码，如果设置了会将读取的 Buffer 数据转为字符串</li><li><strong>objectMode</strong> 缓冲区数据内同为 JS 对象</li><li><strong>highWaterMark</strong> 对于字符串数据为缓存区大小，对于 JS 对象为对象的数量</li></ul><h3 id="非流动性模式" tabindex="-1"><a class="header-anchor" href="#非流动性模式" aria-hidden="true">#</a> 非流动性模式</h3><p>非流动模式指我们对流自定义控制，通过监听 <strong>radable</strong> 事件完成</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>Readable<span class="token punctuation">,</span> ReadableOptions<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;stream&#39;</span>

<span class="token keyword">class</span> <span class="token class-name">HdReadStream</span> <span class="token keyword">extends</span> <span class="token class-name">Readable</span> <span class="token punctuation">{</span>
  <span class="token comment">//data:操作的流数据  options:可读流选项</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

<span class="token comment">//向缓存区中推入数据</span>
  <span class="token function">_read</span><span class="token punctuation">(</span><span class="token parameter">size</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span>
    <span class="token comment">//数据已经推入完毕,如果不设置将一直推入</span>
    <span class="token comment">//你可以注释掉看看效果</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//创建流实例，并声明编码为 utf8，提出数据时将转换为 utf8 字符串</span>
<span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HdReadStream</span><span class="token punctuation">(</span><span class="token string">&#39;nodejs&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">encoding</span><span class="token operator">:</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//非流动模式，手动控制流</span>
node<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;readable&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> chunk <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
  <span class="token comment">//每次读取一个字节数据</span>
  <span class="token comment">//每读一次后，从缓冲区中删除一个字节，直到缓存区读完</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>chunk <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//上面设置了 encoding:utf-8 ，数据会转为utf8字符串</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//数据读取完毕后的事件</span>
node<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;数据读取完成&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="流动模式" tabindex="-1"><a class="header-anchor" href="#流动模式" aria-hidden="true">#</a> 流动模式</h3><p>流动模式指对流的控制自动完成，需要监听 <strong>data</strong> 事件完成，流动模式自动完成，所以操作更方便</p><p>使用流动模式操作对象数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Readable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;stream&#39;</span>

<span class="token keyword">class</span> <span class="token class-name">HdReadStream</span> <span class="token keyword">extends</span> <span class="token class-name">Readable</span> <span class="token punctuation">{</span>
  <span class="token comment">//data:操作的流数据  options:可读流选项</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">super</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">//向缓存区中推入数据</span>
<span class="token function">_read</span><span class="token punctuation">(</span><span class="token parameter">size</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token comment">//数据已经推入完毕,如果不设置将一直推入</span>
  <span class="token comment">//你可以注释掉看看效果</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//创建流实例，并声明编码为 utf8，提出数据时将转换为 utf8 字符串</span>
<span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HdReadStream</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;nodejs&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;node&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">encoding</span><span class="token operator">:</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">objectMode</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//非流动模式，手动控制流</span>
node<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//数据读取完毕后的事件</span>
node<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;数据读取完成&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//读取时发生错误</span>
node<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;数据读取失败&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自定义可写流" tabindex="-1"><a class="header-anchor" href="#自定义可写流" aria-hidden="true">#</a> 自定义可写流</h2><p>可写流需要继承 <strong>Writable</strong> 类实现。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> writeFile <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;fs/promises&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Writable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;stream&#39;</span>

<span class="token comment">//自定义可写流</span>
<span class="token keyword">class</span> <span class="token class-name">HdWritableStream</span> <span class="token keyword">extends</span> <span class="token class-name">Writable</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">file<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//objectMode: _write 方法的 chunk 参数为对象</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>options<span class="token punctuation">,</span> <span class="token literal-property property">objectMode</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">//创建文件或清空已存在文件内容</span>
    <span class="token function">writeFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
  <span class="token function">_write</span><span class="token punctuation">(</span><span class="token parameter">chunk<span class="token punctuation">,</span> encoding<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//使用 Promise 向文件中追加内容，并调用 callback 触发可写流事件</span>
  <span class="token function">writeFile</span><span class="token punctuation">(</span>chunk<span class="token punctuation">.</span>file<span class="token punctuation">,</span> chunk<span class="token punctuation">.</span>content<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">flag</span><span class="token operator">:</span> <span class="token string">&#39;a&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HdWritableStream</span><span class="token punctuation">(</span><span class="token string">&#39;node.txt&#39;</span><span class="token punctuation">)</span>

<span class="token comment">//写入完成事件</span>
node<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;finish&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;文件写入完成&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//写入</span>
node<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token string">&#39;node.txt&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&#39;nodejs写入&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;文件写入成功&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

node<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token string">&#39;node.txt&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&#39; 晚8点直播&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="transform-转换流" tabindex="-1"><a class="header-anchor" href="#transform-转换流" aria-hidden="true">#</a> Transform 转换流</h2><p>Transform流包含了Readable和Writeable特性，在读写过程中可以修改和变换数据</p><p>使用 Transform 流，将数据转换后使用可读流推入缓存区，然后使用 Transform 流将缓存区数据使用可写流处理</p><p>创建用户文件 <strong>user.json</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span>
    <span class="token punctuation">{</span><span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span><span class="token string-property property">&quot;age&quot;</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;next&quot;</span><span class="token punctuation">,</span><span class="token string-property property">&quot;age&quot;</span><span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <strong>transform</strong> 转换流完成实例。执行过程是使用 <strong>createReadStream</strong> 可读流读取 <strong>user.json</strong> 文件，然后使用 <strong>createWriteStream</strong> 写入文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>createReadStream<span class="token punctuation">,</span> createWriteStream<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;fs&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>pipeline<span class="token punctuation">,</span> Transform<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;stream&#39;</span>

<span class="token comment">// 定义 Transform 流</span>
<span class="token keyword">class</span> <span class="token class-name">HdTransformStream</span> <span class="token keyword">extends</span> <span class="token class-name">Transform</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">//数据转换</span>
  <span class="token function">_transform</span><span class="token punctuation">(</span><span class="token parameter">chunk<span class="token punctuation">,</span> encoding<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//数据转换为JS对象，提取年龄大于20用户名</span>
    <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">.</span>age <span class="token operator">&gt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>user<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> \\n</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">// 写入流结束前调用</span>
  <span class="token function">_flush</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;\\nnodejs&#39;</span><span class="token punctuation">)</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//读取</span>
<span class="token keyword">const</span> readStream <span class="token operator">=</span> <span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">&#39;./user.json&#39;</span><span class="token punctuation">)</span>
<span class="token comment">//转换流</span>
<span class="token keyword">const</span> hdTransform <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HdTransformStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//写入流</span>
<span class="token keyword">const</span> writeStream <span class="token operator">=</span> <span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">&#39;./xj.txt&#39;</span><span class="token punctuation">)</span>
<span class="token comment">//使用管道转换流</span>
<span class="token function">pipeline</span><span class="token punctuation">(</span>readStream<span class="token punctuation">,</span> hdTransform<span class="token punctuation">,</span> writeStream<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;执行失败&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="文件上传" tabindex="-1"><a class="header-anchor" href="#文件上传" aria-hidden="true">#</a> 文件上传</h2>`,63),r={href:"https://www.npmjs.com/package/multiparty",target:"_blank",rel:"noopener noreferrer"},k=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>createReadStream<span class="token punctuation">,</span> createWriteStream<span class="token punctuation">,</span> mkdirSync<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;fs&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>createServer<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;http&#39;</span>
<span class="token keyword">import</span> multiparty <span class="token keyword">from</span> <span class="token string">&#39;multiparty&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>pipeline<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;stream&#39;</span>

<span class="token keyword">const</span> service <span class="token operator">=</span> <span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> form <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">multiparty<span class="token punctuation">.</span>Form</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  form<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> fields<span class="token punctuation">,</span> files</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//创建目录</span>
    <span class="token function">mkdirSync</span><span class="token punctuation">(</span><span class="token string">&#39;uploads&#39;</span><span class="token punctuation">)</span>
    
    <span class="token comment">//将临时文件使用流保存数据</span>
    <span class="token function">pipeline</span><span class="token punctuation">(</span>
      <span class="token function">createReadStream</span><span class="token punctuation">(</span>files<span class="token punctuation">.</span>file<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">&#39;./uploads/&#39;</span> <span class="token operator">+</span> files<span class="token punctuation">.</span>file<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>originalFilename<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        error <span class="token operator">?</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">:</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;文件上传成功&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
service<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function d(m,v){const t=e("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("使用流并结合插件 "),s("a",r,[n("multiparty (opens new window)"),i(t)]),n("扩展包实现文件上传")]),k])}const g=p(l,[["render",d],["__file","Stream与Pipe.html.vue"]]);export{g as default};
