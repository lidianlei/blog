import{_ as a,p as n,q as s,a1 as e}from"./framework-ea2a9e6e.js";const t={},p=e(`<h2 id="java技术体系平台" tabindex="-1"><a class="header-anchor" href="#java技术体系平台" aria-hidden="true">#</a> Java技术体系平台</h2><ol><li>Java SE(Java Standard Edition)标准版支持面向桌面级应用（如：Windows下的应用程序）的Java平台，提供了完整的Java核心API，此版本称之为 J2SE</li><li>Java EE（Java Enterprise Edition）企业版：是为开发企业环境下的应用程序提供的一套解决方案，该技术体系包含的技术如：Servlet、Jsp等，注意针对于 Web 应用程序开发，版本以前称为 J2EE</li><li>Java ME（Java Micro Edition）小型版：支持 Java 程序运行在移动端（手机、PDA）上的平台，对Java API 有所精简，并键入了针对移动终端的支持，此版本以前称为 J2ME</li></ol><h2 id="java-重要特点" tabindex="-1"><a class="header-anchor" href="#java-重要特点" aria-hidden="true">#</a> Java 重要特点</h2><ol><li><p>Java 语言是面向对象的（oop）</p></li><li><p>Java 语言是健壮的，Java的强类型机制、异常处理、垃圾的自动收集等是Java晨曦健壮性的重要保证</p></li><li><p>Java 语言是跨平台性的，即 一个编译好的 .class 文件可以在多个系统下运行，这种特性称为跨平台</p></li><li><p>Java 语言是解释型的</p><blockquote><p>解释性语言：javascript，PHP，Java 编译性语言：c / c++</p><p>区别是：解释性语言，编译后的代码，不能直接被机器执行，需要解释器来执行，编译性语言，编译后的代码，可以直接被机器执行，c / c++</p></blockquote></li></ol><h2 id="java核心机制" tabindex="-1"><a class="header-anchor" href="#java核心机制" aria-hidden="true">#</a> Java核心机制</h2><ol><li>JVM 是一个虚拟的计算机，具有指令集并使用不同的存储区域，负责执行指令，管理数据、内存、寄存器，包含再JDK中。</li><li>对于不同的平台，有不同的虚拟机</li><li>Java虚拟机机制屏蔽了底层运行平台的差别，实现了“一次编译，到处运行”</li></ol><p><code>Test.java---(编译 javac)---&gt; Test.class ---(运行java)---&gt;JVM for Linux / JVM for Windows / JVM for Mac</code></p><h2 id="jdk-jre" tabindex="-1"><a class="header-anchor" href="#jdk-jre" aria-hidden="true">#</a> JDK ,JRE</h2><ol><li><p>什么是JDK？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1.</span><span class="token constant">JDK</span> 的全称（Java Development Kit   Java 开发工具包）	<span class="token constant">JDK</span> <span class="token operator">+</span> <span class="token constant">JRE</span> <span class="token operator">+</span> java的开发工具 <span class="token punctuation">[</span>java<span class="token punctuation">,</span>javac<span class="token punctuation">,</span>javadoc<span class="token punctuation">,</span>javap等<span class="token punctuation">]</span>
<span class="token number">2.</span><span class="token constant">JDK</span> 是提供给 Java 开发人员使用的，其中包含了 java 的开发工具，也包括了 <span class="token constant">JRE</span> <span class="token punctuation">,</span>所以按照了 <span class="token constant">JDK</span> ，就不用在到哪都按照 <span class="token constant">JRE</span> 了
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>JRE 基本介绍</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1.</span><span class="token constant">JRE</span> （Java Runtime Environment  java运行环境）  <span class="token constant">JRE</span> <span class="token operator">=</span> <span class="token constant">JVM</span> <span class="token operator">+</span> Java 的核心类库<span class="token punctuation">[</span>类<span class="token punctuation">]</span>
<span class="token number">2.</span>包括 Java 虚拟机（<span class="token constant">JVM</span> java Virtual Machine）和Java 程序所需的核心类库等，如果想要运行一个开发好的 Java 程序，计算机中只需要安装 <span class="token constant">JRE</span> 即可
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>JDK、JRE、JVM 的包含关系</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1.</span><span class="token constant">JDK</span> <span class="token operator">=</span> <span class="token constant">JRE</span> <span class="token operator">+</span> 开发工具集 （例如 Javac<span class="token punctuation">.</span>java编译工具等）
<span class="token number">2.</span><span class="token constant">JRE</span> <span class="token operator">=</span> <span class="token constant">JVM</span> <span class="token operator">+</span> Java <span class="token constant">SE</span> 标准类库（java核心类库）
<span class="token number">3.</span>如果只想运行开发好的 <span class="token punctuation">.</span>class 文件 只需要 <span class="token constant">JRE</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="下载安装-jdk" tabindex="-1"><a class="header-anchor" href="#下载安装-jdk" aria-hidden="true">#</a> 下载安装 JDK</h2><p><strong>官方网址：https://www.oracle.com/java/technologies/javase-downloads.html</strong></p><blockquote><p>细节说明： 安装路径不要有中文或者特殊符号如空格等 当提示安装 JRE 时，可以选择不安装，也可以安装</p></blockquote><h2 id="配置环境变量-path" tabindex="-1"><a class="header-anchor" href="#配置环境变量-path" aria-hidden="true">#</a> 配置环境变量 path</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1.</span>为什么配置环境变量
  在 dos 命令行【win <span class="token operator">+</span> r】中敲入 javac 出现错误提示（没有配置环境变量）
<span class="token number">2.</span>环境变量配置 path 步骤
  <span class="token number">1.</span>我的电脑<span class="token operator">--</span>属性<span class="token operator">--</span>高级系统设置<span class="token operator">--</span>环境变量
  <span class="token number">2.</span>增加 <span class="token constant">JAVA_HOME</span> 环境变量，指向 jdk 的安装目录
  <span class="token number">3.</span>编辑 path 环境变量，增加 <span class="token operator">%</span><span class="token constant">JAVA_HOME</span><span class="token operator">%</span>\\bin
  <span class="token number">4.</span>打开 <span class="token constant">DOS</span> 命令行，任意目录下敲入 javac<span class="token operator">/</span>java，如果出现 javac 的参数信息，配置成功
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="java快速入门" tabindex="-1"><a class="header-anchor" href="#java快速入门" aria-hidden="true">#</a> java快速入门</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//1.public class Hello 表示 Hello 是一个类，是一个 public 公有的类</span>
<span class="token comment">//2.Hello{} 表示一个类的开始和结束</span>
<span class="token comment">//3.public static void main(String[] args) 表示一个主方法，即程序的入口</span>
<span class="token comment">//4.main(){} 表示方法的开始和结束</span>
<span class="token comment">//5.System.out.println(&quot;Hello&quot;) 表示输出 ‘Hello’ </span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>
    <span class="token comment">//编写一个 main 方法</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Java 执行流程分析</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">.</span>java文件（源文件）<span class="token operator">--</span>（javac<span class="token operator">/</span>编译）<span class="token operator">--</span><span class="token operator">&gt;</span><span class="token punctuation">.</span>class 文件 <span class="token operator">--</span>（java<span class="token operator">/</span>运行）<span class="token operator">--</span><span class="token operator">&gt;</span>结果
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="什么是编译" tabindex="-1"><a class="header-anchor" href="#什么是编译" aria-hidden="true">#</a> 什么是编译</h3><ul><li>有了 Java 源文件，通过编译器将其编译成 JVM 可以识别的字符码文件</li><li>在该源文件目录下，通过 javac 编译工具对 Hello.java 文件进行编译</li><li>如果程序没有错误，没有任何提示，但在当前目录下会出现一个 Hello.class 文件，该文件称为字节码文件，也是可以执行的 java 的程序</li></ul><h2 id="java开发注意事项" tabindex="-1"><a class="header-anchor" href="#java开发注意事项" aria-hidden="true">#</a> Java开发注意事项</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1</span><span class="token punctuation">.</span>Java 源文件以 <span class="token punctuation">.</span>java 为扩展名，源文件的基本组成部分是类（<span class="token keyword">class</span>）<span class="token punctuation">,</span>如本类中的 Hello 类
<span class="token number">2</span><span class="token punctuation">.</span>Java 应用程序的执行入口是 <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法，它有固定的书写格式
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token parameter">String<span class="token punctuation">[</span><span class="token punctuation">]</span> args</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
<span class="token number">3</span><span class="token punctuation">.</span>Java 语言严格区分大小写
<span class="token number">4</span><span class="token punctuation">.</span>Java 方法由一条条语句构成，每个语句以“<span class="token punctuation">;</span>”结束
<span class="token number">5.</span>大括号都是成对出现的，缺一不可。
<span class="token number">6.</span>一个源文件中最多只能有一个 <span class="token keyword">public</span> 类，其它类的个数不限
<span class="token number">7.</span>如果源文件包含一个 <span class="token keyword">public</span> 类，则文件名必须按该类名命名，
<span class="token number">8.</span>一个源文件中最多只能有一个 <span class="token keyword">public</span> 类，其它类的个数不限，也可以将 main 方法写在非 <span class="token keyword">public</span> 类中，然后指定运行非 <span class="token keyword">public</span> 类，这样入口方法就是非 <span class="token keyword">public</span> 的main方法
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="java-转义字符" tabindex="-1"><a class="header-anchor" href="#java-转义字符" aria-hidden="true">#</a> Java 转义字符</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1.</span> \\t <span class="token operator">:</span> 一个制表位，实现对齐的功能
<span class="token number">2.</span> \\n <span class="token operator">:</span> 换行符
<span class="token number">3.</span> \\\\ <span class="token operator">:</span> 一个 \\
<span class="token number">4.</span> \\&quot; <span class="token operator">:</span> 一个 “
<span class="token number">5.</span> \\<span class="token string">&#39; : 一个 &#39;</span>
<span class="token number">6.</span> \\r <span class="token operator">:</span> 一个回车 System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&#39;hello \\r JAVA&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注释" tabindex="-1"><a class="header-anchor" href="#注释" aria-hidden="true">#</a> 注释</h2><p>用于注解说明解释程序的文字就是注释，注释提高了代码的阅读性（可读性）；注释是一个程序员必须要具有的良好编程习惯。将自己的思想通过注释先整理出来，再用代码去体现</p><h3 id="java-中的注释类型" tabindex="-1"><a class="header-anchor" href="#java-中的注释类型" aria-hidden="true">#</a> Java 中的注释类型</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1.</span>单行注释
    基本格式
    格式： <span class="token comment">//注释文字</span>
<span class="token number">2.</span>多行注释
	基本格式
	格式： <span class="token comment">/* 注释文字 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>被注释的文字，不会被 JVM（java 虚拟机）解释执行</li><li>多行注释里面不允许有多行注释嵌套</li></ul><h3 id="文档注释" tabindex="-1"><a class="header-anchor" href="#文档注释" aria-hidden="true">#</a> 文档注释</h3><p>注释内容可以被 <code>JDK</code>提供的工具 <code>javadoc</code>所解析，生成一套以网页文件形式体现的该程序的说明文档，一半写在类</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1.</span>基本格式
<span class="token number">2.</span>如何生成对应的文档注释
<span class="token number">3.</span>应用实例

<span class="token comment">//javadoc 标签</span>
javadoc <span class="token operator">-</span>d 文件夹名 <span class="token operator">-</span>xx <span class="token operator">-</span>yy Demo3<span class="token punctuation">.</span>java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>javadoc标签</strong></p><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td>@author</td><td>标识一个类作者</td></tr><tr><td>@deprecated</td><td>指名一个过期的类或成员</td></tr><tr><td>{@docRoot}</td><td>指明当前文档根目录的路径</td></tr><tr><td>@exception</td><td>标志一个类抛出的异常</td></tr><tr><td>{@inheritDoc}</td><td>从直接父类继承的注释*</td></tr><tr><td>{@link}</td><td>插入一个到另一个主题的链接</td></tr><tr><td>{@linkplain}</td><td>插入一个到另一个主题的链接，但是该链接显示纯文本字体</td></tr><tr><td>@param</td><td>说明一个方法的参数</td></tr><tr><td>@return</td><td>说明返回值类型</td></tr><tr><td>@see</td><td>指定一个到另一个主题的链接</td></tr><tr><td>@serial</td><td>说明一个序列化属性</td></tr><tr><td>@serialData</td><td>说明通过writeObject() 和 writeExternal() 方法写的数据</td></tr><tr><td>@serialField</td><td>说明一个 ObjectStreamField 组件</td></tr><tr><td>@since</td><td>标记当引入一个特定的变化时</td></tr><tr><td>@throws</td><td>和 @exception 标签一样</td></tr><tr><td>{@value}</td><td>显示常量的值，该常量必须是 static 属性</td></tr><tr><td>@version</td><td>指定类的版本</td></tr></tbody></table><h2 id="java代码规范" tabindex="-1"><a class="header-anchor" href="#java代码规范" aria-hidden="true">#</a> Java代码规范</h2><ol><li>类、方法的注释，要以 javadoc 的方式来写</li><li>非 Java Doc 的注释，往往是给代码的维护者看的，着重告述读者为什么这样写，如何修改，注意什么问题等</li><li>使用 tab 操作，实现缩进，默认整体向右移动，使用 shift + tab 整体想左移</li><li>运算符和 = 两边习惯性各加一个空格，</li><li>源文件使用 UTF-8编码</li><li>行宽度不要超过 80 字符</li><li>代码编写 <code>次行风格</code> 和 <code>尾行风格</code></li></ol>`,36),l=[p];function i(c,o){return n(),s("div",null,l)}const d=a(t,[["render",i],["__file","java.html.vue"]]);export{d as default};
