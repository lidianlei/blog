import{_ as a,p as t,q as p,R as e,a1 as n}from"./framework-ea2a9e6e.js";const o={},c=n(`<h2 id="变量的介绍" tabindex="-1"><a class="header-anchor" href="#变量的介绍" aria-hidden="true">#</a> 变量的介绍</h2><blockquote><p><strong>变量相当于内存中一个数据存储空间</strong>的表示，你可以把变量看做是一个房间的门牌号，通过<strong>门牌号</strong>我们可以找到房间，而通过变量名可以访问到变量（值）</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>变量使用的基本步骤
<span class="token number">1.</span>声明变量
	int a<span class="token punctuation">;</span>
<span class="token number">2.</span>赋值变量
	a<span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span> <span class="token comment">//把 60 赋给 a //也可以一步到位int a = 60;</span>
	使用 System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>变量使用注意事项</strong></p><ol><li>变量表示内存中的一个存储区域【不同的变量，类型不同，占用的空间大小不同，比如 int 4 个字节，double 就是8个字节 】</li><li>该区域又自己的名称（变量名）和类型【数据类型】</li><li>变量必须先声明，后使用，即有顺序</li><li>该区域的数据/值可以在 同一类型 范围内不断变化</li><li>变量在同一个作用域内不能重名</li><li>变量 = 变量名 + 值 + 数据类型，变量三要素</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VarDetail</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//变量必须先声明，后使用，</span>
        <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//50</span>
        <span class="token comment">//该区域的数据 / 值 可以在同一类型范围内不断变化</span>
        <span class="token comment">//num = &#39;Java&#39;;错误</span>
        num<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//100</span>

        <span class="token comment">//int num; 变量在同一作用域下不能重名</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>程序中 + 号的使用</strong></p><ol><li>当左右两边都是数值型时，则做加法运算</li><li>当左右两边有一方为字符串，则做拼接运算</li><li>运算顺序，是从左到右</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">+</span> <span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//198</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;100&quot;</span> <span class="token operator">+</span> <span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10098</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token char">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//103hello</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span> <span class="token operator">+</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//hello1003</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h2><h3 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型" aria-hidden="true">#</a> 基本数据类型</h3><p><code>Java语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1.</span>数值型：整数类型，存放整数（byte<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>short<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>int<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>long<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span>）	
	浮点（小数）类型（float<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>double<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span>）
<span class="token number">2.</span>字符型（char<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>）<span class="token punctuation">,</span>存放单个字符<span class="token string">&#39;a&#39;</span><span class="token punctuation">;</span>
<span class="token number">3.</span>布尔型（boolean<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>）<span class="token punctuation">,</span>存放 <span class="token boolean">true</span> <span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>引用数据类型</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1.</span>类  （<span class="token keyword">class</span>）
<span class="token number">2.</span>接口（<span class="token keyword">interface</span>）
<span class="token number">3.</span>数组（<span class="token punctuation">[</span><span class="token punctuation">]</span>）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="整数类型" tabindex="-1"><a class="header-anchor" href="#整数类型" aria-hidden="true">#</a> 整数类型</h3><table><thead><tr><th>类型</th><th>占用存储空间</th><th>范围</th></tr></thead><tbody><tr><td>byte [字节]</td><td>1字节</td><td>-128 ~ 127</td></tr><tr><td>short [短整型]</td><td>2字节</td><td>-32768 ~ 32767</td></tr><tr><td>int [整型]</td><td>4字节</td><td>-2147483648 - 2147483647</td></tr><tr><td>long [长整型]</td><td>8字节</td><td>-2的63次方 ~ 2的63次方-1</td></tr></tbody></table><p><strong>整型的使用细节</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1</span><span class="token punctuation">.</span>Java各整数类型有固定的范围和字段长度，不受据具体 <span class="token constant">OS</span> 【操作系统】的影响，以保证 Java 程序的可移植性
<span class="token number">2</span><span class="token punctuation">.</span>Java 的整型常量（具体值）默认为 int 型，声明 long 型常量须后加 <span class="token string">&#39;l&#39;</span>或<span class="token string">&#39;L&#39;</span>
<span class="token number">3</span><span class="token punctuation">.</span>Java 程序中变量常声明为 int 型，除非不足以表示大数，才使用 long
<span class="token number">4</span><span class="token punctuation">.</span>bit：计算机中的最小存储单位，byte：计算机中基本存储单元  
	1yte <span class="token operator">=</span> <span class="token number">8</span> bit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IntDetail</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//Java 的整型常量（具体值）默认为 int 型，声明 long 型常量须后加 &#39;l&#39;或&#39;L&#39;</span>
        <span class="token keyword">int</span> nl <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//4个字符</span>
        <span class="token comment">//int n2 = 1L;//错误 1L是 long 类型</span>
        <span class="token keyword">long</span> n3  <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span><span class="token comment">//对 是 long类型</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="浮点类型" tabindex="-1"><a class="header-anchor" href="#浮点类型" aria-hidden="true">#</a> 浮点类型</h3><p><code>Java 的浮点类型可以表示一个小数，比如 123.4，7.8，0.12等</code></p><p><strong>浮点型的分类</strong></p><table><thead><tr><th>类型</th><th>占用存储空间</th><th>范围</th></tr></thead><tbody><tr><td>单精度 float</td><td>4字节</td><td>-3.403E38 ~ 3.403E38</td></tr><tr><td>双精度 double</td><td>8字节</td><td>-1.798E308 ~ 1.798E308</td></tr></tbody></table><ol><li>关于浮点数在机器中存放形式的简单说明：<strong>浮点数 = 符号位 + 指数位 + 尾数位</strong></li><li>尾数部分可能丢失，造成精度损失（<strong>小数都是近似值</strong>）</li></ol><p><strong>浮点型使用细节</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1.</span>与整数类型相似，<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Java</span><span class="token template-punctuation string">\`</span></span>浮点类型也有固定的范围和字段长度， 不受具体<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">OS</span><span class="token template-punctuation string">\`</span></span>的影响。<span class="token punctuation">[</span>float <span class="token number">4</span> 个字节 double 是<span class="token number">8</span>个字节<span class="token punctuation">]</span>
<span class="token number">2</span><span class="token punctuation">.</span>Java 的浮点型常量（具体值）默认为 double 型，声明 float 型常量，须后加 <span class="token string">&#39;f&#39;</span>或<span class="token string">&#39;F&#39;</span>
<span class="token number">3.</span>浮点型常量有两种表示形式
	十进制形式：如： <span class="token number">5.12</span>  <span class="token number">512</span><span class="token punctuation">.</span>0f    <span class="token number">.512</span>  （必须有小数点）
    科学计数法形式：如：<span class="token number">5.1232</span> 【<span class="token number">5.12</span><span class="token operator">*</span><span class="token number">10</span>的<span class="token number">2</span>次方】  <span class="token number">5.12E-2</span> 【<span class="token number">5.12</span><span class="token operator">/</span><span class="token number">10</span>的<span class="token number">2</span>次方】
<span class="token number">4.</span>通常情况下，使用 double 型，因为它比 float 型更精确
	double num9 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">.</span>1234567851l
    float num10 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">.</span>1234567851F<span class="token punctuation">;</span> （知道 <span class="token number">7</span> 位小数）
<span class="token number">5.</span>浮点数使用陷阱：<span class="token number">2.7</span> 和 <span class="token number">8.1</span> <span class="token operator">/</span> <span class="token number">3</span> 比较    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FloatDetail</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//Java 的浮点型常量（具体值）默认为 double 型，声明 float 型常量，须后加 f / F</span>
        <span class="token comment">//float num1 = 1.1;//错误</span>
        <span class="token keyword">float</span> num2 <span class="token operator">=</span> <span class="token number">1.1F</span><span class="token punctuation">;</span><span class="token comment">//正确</span>
        <span class="token keyword">double</span> num3 <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span><span class="token comment">//对</span>
        <span class="token keyword">double</span> num4 <span class="token operator">=</span> <span class="token number">1.1F</span><span class="token punctuation">;</span><span class="token comment">//对</span>

        <span class="token comment">//十进制数形式：如5.12   512.0f   .512(必须有小数点)</span>
        <span class="token keyword">double</span> num5<span class="token operator">=</span><span class="token number">.123</span><span class="token punctuation">;</span><span class="token comment">//等价 0.123</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num5<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//科学计数法形式：如 5.12e2 【5.12 * 10的2次方】   5.12E-2</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">5.12e2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//512.0</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">5.12E-2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0.0512</span>

        <span class="token comment">//通常情况下，使用 double 型，因为它比 float型更精确</span>
        <span class="token keyword">double</span> num9 <span class="token operator">=</span> <span class="token number">2.1234567851</span><span class="token punctuation">;</span>
        <span class="token keyword">float</span> num10 <span class="token operator">=</span> <span class="token number">2.1234567851F</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num9<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.1234567851</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num10<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.1234567</span>

        <span class="token comment">//浮点数使用陷阱 2.7  和 8.1 / 3 比较</span>
        <span class="token keyword">double</span> num11 <span class="token operator">=</span> <span class="token number">2.7</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> num12 <span class="token operator">=</span> <span class="token number">8.1</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num11<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.7</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num12<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//接近 2.7 的一个小数，而不是 2.7</span>
        <span class="token comment">//得到一个重要的使用点: 当我们对运算结果是小数的进行相等判断是，要小心</span>
        <span class="token comment">//应该是以两个数的差值的绝对值，在某个精度范围类判</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>num11 <span class="token operator">-</span> num12<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0.000001</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;差值分校小，认为相等&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//如果是直接查询得到的小数或者直接赋值，是可以判断相等</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="java文档" tabindex="-1"><a class="header-anchor" href="#java文档" aria-hidden="true">#</a> Java文档</h3><ol><li><p>API （Application Programming Interface,应用程序编程接口）是 Java 提供的基本编程接口（Java提供的类还有相关的方法）。</p><p>中文在线文档：https://www.matools.com</p></li><li><p>Java 语言提供了大量的基础类，因此 Oracle 公司，也为这些基础类提供了相应的 API 文档，用于告诉开发者如何使用这些类，以及这些类里包含的方法</p></li><li><p>Java 类的组织形式</p></li></ol>`,30),l=["src"],i=n(`<h3 id="字符类型" tabindex="-1"><a class="header-anchor" href="#字符类型" aria-hidden="true">#</a> 字符类型</h3><blockquote><p>字符类型可以表示单个字符，字符类型是 char ，char 是两个字节（可以存放汉字），多个字符我们用字符串 String</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token char">&#39;\\t&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> c3 <span class="token operator">=</span> <span class="token char">&#39;韩&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> c4 <span class="token operator">=</span> <span class="token number">97</span><span class="token punctuation">;</span><span class="token comment">//a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>字符类型使用</strong></p><ol><li><p>字符常量是用单引号 (&#39;&#39;) 括起来的单个字符，例如：char c1 = &#39;a&#39;；char c2 = ’中‘；char c3 = &#39;9&#39;;</p></li><li><p>Java 中还允许使用转义字符 &#39;&#39; 来将其后的字符转变为特殊字符型常量。如：char c3 = &#39;\\n&#39;；//&#39;\\n&#39; 表示换行符</p></li><li><p>在 Java 中，char 的本质是一个整数，在输出时，时 <strong>unicode</strong>码对应的字符。</p><p>http://tool.chinaz.com/Tools/Unicode.aspx</p></li><li><p>可以直接给 char 赋一个整数，然后输出时，会按照对应的 unicode 字符输出 【97 ==》 a】</p></li><li><p>char 类型是可以进行运算的，相当于一个整数，因为它都对应有 Unicode 码</p></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CharDetail</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//在 java中，char的本质是一个整数，在默认输出时，时 unicode 码对应的字符</span>
        <span class="token comment">//要输出对应的数字，可以 (int) 字符</span>
        <span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token number">97</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//a</span>
        <span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span><span class="token comment">//输出 &#39;a&#39; 对应的数字</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//97</span>
        <span class="token keyword">char</span> c3 <span class="token operator">=</span> <span class="token char">&#39;韩&#39;</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//38889</span>
        <span class="token keyword">char</span> c4 <span class="token operator">=</span> <span class="token number">38889</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//韩</span>
        <span class="token comment">//char 类型是可以进行运算的，相当于一个整数，因为它都对应有 Unicode 码</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//107</span>
        <span class="token keyword">char</span> c5 <span class="token operator">=</span> <span class="token char">&#39;b&#39;</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//99</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 99==&gt;对应的字符--&gt;编码表ASCII（规定好的）==》c</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>字符型 存储到计算机中，需要将字符对应的码值（整数）找出来，比如 &#39;a&#39;</p><p>存储：’a‘ ==&gt; 码值 97 ==&gt; 二进制（110 0001）==&gt;存储</p><p>读取：二进制（110 0001）==&gt; 97 ==&gt; &#39;a&#39; ==&gt;显示</p></li><li><p>字符和码值的对应关系是通过字符编码表决定的（规定好的）</p></li></ol><h3 id="boolean" tabindex="-1"><a class="header-anchor" href="#boolean" aria-hidden="true">#</a> Boolean</h3><p><strong>基本介绍</strong></p><ol><li><p>布尔类型也叫<code>boiolean</code>类型，<code>boolean</code>类型数据只允许取值 <code>true</code> 和 <code>false</code>,无 null</p></li><li><p>boolean 类型占一个字节</p></li><li><p>boolean 类型适于逻辑运算，一般用于程序流程控制</p><p>if条件控制语句</p><p>while 循环控制语句</p><p>do-while 循环控制语句</p><p>for 循环控制语句</p></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> boolean01 <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//演示判断成绩是否通过</span>
        <span class="token keyword">boolean</span> isPass <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isPass<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;考试通过&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;下次努力&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="基本数据类型转换" tabindex="-1"><a class="header-anchor" href="#基本数据类型转换" aria-hidden="true">#</a> 基本数据类型转换</h3><h4 id="自动类型转换" tabindex="-1"><a class="header-anchor" href="#自动类型转换" aria-hidden="true">#</a> 自动类型转换</h4><ol><li>当 Java 程序在进行赋值或者运算时，精度小的类型自动转换为精度大的数据类型，这个就是 自动类型转换</li><li>数据按照精度（容量）大小为排序</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>char <span class="token operator">--</span><span class="token operator">&gt;</span> int <span class="token operator">--</span><span class="token operator">&gt;</span> long <span class="token operator">--</span><span class="token operator">&gt;</span> float <span class="token operator">--</span><span class="token operator">&gt;</span> double
byte <span class="token operator">--</span><span class="token operator">&gt;</span> short <span class="token operator">--</span><span class="token operator">&gt;</span> int <span class="token operator">--</span><span class="token operator">&gt;</span> long <span class="token operator">--</span><span class="token operator">&gt;</span> float <span class="token operator">--</span><span class="token operator">&gt;</span> double
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自动类型转换注意和细节" tabindex="-1"><a class="header-anchor" href="#自动类型转换注意和细节" aria-hidden="true">#</a> 自动类型转换注意和细节</h4><ol><li>有多种类型的数据混合运算时，系统首先自动将所有数据转换成容量最大的那种数据类型，然后再进行计算</li><li>当我们把精度（容量）大 的数据类型赋值给进度（容量）小 的数据类型时，就会报错，反之就会进行自动类型转换</li><li>（byte，short）和 char 之间不会相互自动转换</li><li>byte，short，char 它们三者可以计算，在计算式首先转换为 int 类型</li><li>boolean 不参与转换</li><li>自动提升原则：表达式结果的类型自动提升为 操作数中最大的类型</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//自动类型转换细节</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoConvertDetail</span> <span class="token punctuation">{</span>
  <span class="token comment">//编写一个 main 方法</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//细节1：有多种类型的数据混合运算时</span>
    <span class="token comment">//系统首先自动将所有数据转换成容量最大的那种数据类型，然后再进行计算</span>
    <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//ok</span>
    <span class="token comment">// float d1 = n1 + 1.1;//错误 n1 + 1.1 =&gt; 结果类型是 double</span>
    <span class="token comment">// double d1 = n1 + 1.1;//对 n1 + 1.1 =&gt; 结果类型是 double</span>
    <span class="token keyword">float</span> d1 <span class="token operator">=</span> n1 <span class="token operator">+</span> <span class="token number">1.1F</span><span class="token punctuation">;</span><span class="token comment">//对 n1 + 1.1 =&gt;结果类型是 float</span>

    <span class="token comment">//细节2：当我们把精度（容量）大 的数据类型赋值给精度（容量）小 的数据类型时</span>
    <span class="token comment">//就会报错，反之就会进行自动类型转换</span>

    <span class="token comment">//int n2 = 1.1; //错误 double --&gt; int</span>

    <span class="token comment">//细节3：（byte，short）和 char 之间不会相互自动转换</span>
    <span class="token comment">//当把具体数赋给 byte 时，（1）先判断该数是否再 byte 范围内，如果是就可以</span>
    <span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//对 -128 ~ 127</span>
    <span class="token comment">//int n2 = 1;//n2 是 int</span>
    <span class="token comment">//byte b2 = n2;//错误。原因：如果是变量赋值，判断类型</span>

    <span class="token comment">//char c1 = b1;// 错误：原因 byte 不能自动转成 char</span>

    <span class="token comment">//细节4：byte short char 他们三至可以计算，在计算式首先转换为 int 类型</span>
    <span class="token keyword">byte</span> b2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">byte</span> b3 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">short</span> s1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">//short s2 = b2 + s1; 错误：b2 + s1 ==&gt;int类型</span>
    <span class="token keyword">int</span> s2 <span class="token operator">=</span> b2 <span class="token operator">+</span> s1<span class="token punctuation">;</span><span class="token comment">//对 b2 + s1 =&gt; int</span>

    <span class="token comment">//byte b4 = b2 + b3;//错误：b2+b3=&gt;int</span>

    <span class="token comment">//boolean 不参与转换</span>
    <span class="token keyword">boolean</span> pass <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token comment">//自动提升原则：表达式结果的类型自动提升为 操作数中最大的类型</span>

    <span class="token keyword">byte</span> b4 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">short</span> s4 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> num4 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> num400 <span class="token operator">=</span> <span class="token number">1.1F</span><span class="token punctuation">;</span>

    <span class="token keyword">double</span> numAll <span class="token operator">=</span> b4 <span class="token operator">+</span> s4 <span class="token operator">+</span> num400 <span class="token operator">+</span> num4<span class="token punctuation">;</span><span class="token comment">//float =&gt; double</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="强制类型转换" tabindex="-1"><a class="header-anchor" href="#强制类型转换" aria-hidden="true">#</a> 强制类型转换</h4><p>自动类型转换的逆过程，<strong>将容量大的数据类型转换为容量晓得数据类型</strong>，使用时要加上强制转换符 <strong>（）</strong>,但可能造成<strong>精度降低或溢出</strong>，格外要注意</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForceConvert</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token number">1.9</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span>

    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> j<span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//100</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>强制类型转换细节说明</strong></p><ol><li>当进行数据的大小从 <strong>大</strong>--&gt; <strong>小</strong>，就需要使用到强制转换</li><li>强转符号只针对于最近的操作数有效，往往会使用小括号提升优先级</li><li><strong>char</strong>类型可以保存<strong>int</strong>的常量值，但不能保存<strong>int</strong>的变量值，需要强转</li><li><strong>byte</strong>和<strong>short，char</strong>类型在进行运算时，当作<strong>int</strong>类型处理</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForceConvertDetail</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//强制类型转换</span>
    <span class="token comment">//强转符号只针对于 最近的操作数有效，往往会使用小括号提升优先级</span>
    <span class="token comment">//int x = (int) 10*3.5 + 6*1.5;//编译错误 double&gt; int</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span><span class="token number">3.5</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token operator">*</span><span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//(int)44.0 =&gt; 44</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//44</span>

    <span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">//ok</span>
    <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">//ok</span>
    <span class="token comment">//char c2 = m;//错误</span>
    <span class="token keyword">char</span> c3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> m<span class="token punctuation">;</span><span class="token comment">//ok</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//100 对应的字符，d 字符</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>练习</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">short</span> s <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token comment">//ok</span>
    <span class="token comment">//s = s-9;//错误 int &gt; short</span>

    <span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//ok</span>
    <span class="token comment">//b = b + 11;//错误 int &gt; byte</span>

    <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span><span class="token comment">//ok</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span><span class="token comment">//ok</span>
    <span class="token keyword">float</span> d <span class="token operator">=</span> <span class="token number">.314F</span><span class="token punctuation">;</span><span class="token comment">//ok</span>
    <span class="token keyword">double</span> result <span class="token operator">=</span> c <span class="token operator">+</span> i <span class="token operator">+</span> d<span class="token punctuation">;</span><span class="token comment">//ok</span>

    <span class="token keyword">byte</span> b4 <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span><span class="token comment">//ok</span>
    <span class="token keyword">short</span> s4 <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span><span class="token comment">//ok</span>
    <span class="token comment">//short t4 = s4 + b4;//错误 int&gt; short</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26);function u(s,r){return t(),p("div",null,[c,e("img",{src:s.$withBase("/images/java/1.png"),alt:"foo"},null,8,l),i])}const d=a(o,[["render",u],["__file","java变量.html.vue"]]);export{d as default};
