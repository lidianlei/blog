import{_ as t,M as p,p as o,q as e,R as s,t as n,N as c,a1 as l}from"./framework-ea2a9e6e.js";const i={},u=s("h2",{id:"事件循环",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#事件循环","aria-hidden":"true"},"#"),n(" 事件循环")],-1),r=s("p",null,[n("一般的服务器会为每个用户请求单独生产线程来服务，但线程的管理是比较耗时的。"),s("strong",null,"Node.js"),n("本身时以单线程的模式运行的，即所有用户请求使用一个主线程完成，但这种方式如果多个用户请求时会发生阻塞，请求会排队执行")],-1),k=s("strong",null,"Node",-1),d={href:"https://libuv.org/",target:"_blank",rel:"noopener noreferrer"},v=l(`<ul><li><strong>libuv</strong>是使用 C 语言编写的跨平台开源库</li><li><strong>libuv</strong>是处理 Node.js 中异步非阻塞操作的</li><li><strong>libuv</strong>使用线程池和时间循环处理异步操作</li></ul><p>Node 主线程维护事件队列，接收到请求后放入事件队列中，然后继承接收其他请求</p><p>主线程空闲时，循环事件队列，检查队列中是否有任务，这时根据不同的任务使用不同的处理方式</p><ul><li>入伏哦时非 <code>I/O</code> 操作，就通过主线程执行，然后通过回调函数返回到上层调用</li><li>如果是 <code>I/O</code> 操作就交给<strong>Libuv</strong>使用多线程处理，处理后再以回调函数形式返回到事件队列中（执行上步操作）</li></ul><p><strong>简单总结：</strong></p><ol><li>非<code>IO</code>操作：接收请求-&gt;放入任务队列-&gt;事件循环-&gt;返回上传调用</li><li><code>I/O</code>操作：接受请求-&gt;放入任务队列-&gt;Libuv 线程池处理-&gt;返回任务队列-&gt;事件循环-&gt;返回上传调用</li></ol><h2 id="线程池" tabindex="-1"><a class="header-anchor" href="#线程池" aria-hidden="true">#</a> 线程池</h2><p><code>node.js</code>中以<code>Sync</code>为后缀的方法，一般为同步方法，同步方法会在<code>node.js</code>主线程执行，会发生阻塞</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>pbkdf2Sync<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;crypto&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> begin <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> key1<span class="token operator">=</span><span class="token function">pbkdf2Sync</span><span class="token punctuation">(</span><span class="token string">&quot;Node&quot;</span><span class="token punctuation">,</span><span class="token string">&#39;salt&#39;</span><span class="token punctuation">,</span><span class="token number">100000</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token string">&#39;sha512&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> key2<span class="token operator">=</span><span class="token function">pbkdf2Sync</span><span class="token punctuation">(</span><span class="token string">&quot;Node&quot;</span><span class="token punctuation">,</span><span class="token string">&#39;salt&#39;</span><span class="token punctuation">,</span><span class="token number">100000</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token string">&#39;sha512&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> key3<span class="token operator">=</span><span class="token function">pbkdf2Sync</span><span class="token punctuation">(</span><span class="token string">&quot;Node&quot;</span><span class="token punctuation">,</span><span class="token string">&#39;salt&#39;</span><span class="token punctuation">,</span><span class="token number">100000</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token string">&#39;sha512&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> begin<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将<code>crypto</code>加密操作使用异步操作，这时<code>node.js</code>主线程会将任务交给<code>libuv</code>线程池执行，不阻塞主线程。因为<code>libuv</code>是多线程，这时执行事件就少很多。当<code>libuv</code>执行完成后调用<code>node.js</code>主线程中的回调函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>pbkdf2<span class="token punctuation">,</span> pbkdf2Sync<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;crypto&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> begin <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">pbkdf2</span><span class="token punctuation">(</span><span class="token string">&#39;Node.js&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;salt&#39;</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">&#39;sha512&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> begin<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="回调函数" tabindex="-1"><a class="header-anchor" href="#回调函数" aria-hidden="true">#</a> 回调函数</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">writeFile</span><span class="token punctuation">(</span>file<span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">error</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//执行到这里，放入异步队列</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;%s 文件写入成功，内容是 %s&#39;</span><span class="token punctuation">,</span> file<span class="token punctuation">,</span> content<span class="token punctuation">)</span>
      <span class="token comment">//任务执行后，调用回调函数</span>
      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> any<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">callback</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;node&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  error <span class="token operator">?</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;文件保存成功&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="promise" tabindex="-1"><a class="header-anchor" href="#promise" aria-hidden="true">#</a> Promise</h2><p>使用<strong>Promise <strong>与</strong>Async <strong>与</strong>Await</strong>可以使用异步的编写更清晰，并避免回调函数带来的嵌套问题</p>`,15);function b(g,m){const a=p("ExternalLinkIcon");return o(),e("div",null,[u,r,s("p",null,[n("为了解决这个问题，"),k,n("内部使用 "),s("a",d,[n("Libuv"),c(a)]),n(" 实现异步非阻塞的任务处理")]),v])}const h=t(i,[["render",b],["__file","事件循环.html.vue"]]);export{h as default};
